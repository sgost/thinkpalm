{"version":3,"file":"366.bundle.js","mappings":"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","sources":["webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/assign/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/addDays/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/addHours/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/addMilliseconds/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/addMinutes/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/addMonths/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/addWeeks/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/addYears/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/constants/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/differenceInCalendarWeeks/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/differenceInCalendarYears/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/endOfDay/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/endOfMonth/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/endOfWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/format/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getDate/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getDay/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getDaysInMonth/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getHours/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getISOWeekYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getISOWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getMinutes/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getMonth/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getQuarter/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getSeconds/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getTime/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/getYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isAfter/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isBefore/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isDate/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isEqual/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isSameDay/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isSameMonth/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isSameQuarter/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isSameYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isValid/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/isWithinInterval/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/locale/en-US/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/max/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/min/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/parseISO/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/setUTCDay/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/parse/_lib/parsers/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/setUTCWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/_lib/setUTCISODay/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/parse/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/setHours/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/setMinutes/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/setMonth/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/setQuarter/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/setSeconds/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/setYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/startOfDay/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/startOfISOWeekYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/startOfISOWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/startOfMonth/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/startOfQuarter/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/startOfWeek/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/startOfYear/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/subDays/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/subHours/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/subMilliseconds/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/subMinutes/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/subMonths/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/subWeeks/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/subYears/index.js","webpack://atlas-payments-ui/./node_modules/date-fns/esm/toDate/index.js"],"sourcesContent":["export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\n\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\n\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * const result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","import toDate from \"../toDate/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getISOYear` to `getISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\n\nexport default function getISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\n\nexport default function getISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMinutes\n * @category Minute Helpers\n * @summary Get the minutes of the given date.\n *\n * @description\n * Get the minutes of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the minutes of 29 February 2012 11:45:05:\n * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 45\n */\n\nexport default function getMinutes(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = date.getMinutes();\n  return minutes;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\n\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getQuarter\n * @category Quarter Helpers\n * @summary Get the year quarter of the given date.\n *\n * @description\n * Get the year quarter of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which quarter is 2 July 2014?\n * const result = getQuarter(new Date(2014, 6, 2))\n * //=> 3\n */\n\nexport default function getQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = Math.floor(date.getMonth() / 3) + 1;\n  return quarter;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getSeconds\n * @category Second Helpers\n * @summary Get the seconds of the given date.\n *\n * @description\n * Get the seconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the seconds of 29 February 2012 11:45:05.123:\n * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 5\n */\n\nexport default function getSeconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds();\n  return seconds;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day (and year and month)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n * \n * @example\n * // Are 4 September and 4 October in the same day?\n * var result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n * \n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month (and year)?\n *\n * @description\n * Are the given dates in the same month (and year)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n *\n * @example\n * // Are 2 September 2014 and 25 September 2015 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n * //=> false\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import startOfQuarter from \"../startOfQuarter/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameQuarter\n * @category Quarter Helpers\n * @summary Are the given dates in the same quarter (and year)?\n *\n * @description\n * Are the given dates in the same quarter (and year)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same quarter (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\n * var result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\n * //=> true\n * \n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same quarter?\n * var result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\n\nexport default function isSameQuarter(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);\n  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);\n  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear();\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\nexport default function isWithinInterval(dirtyDate, interval) {\n  requiredArgs(2, arguments);\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `max` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   var date1 = new Date(1989, 6, 10)\n *   var date2 = new Date(1987, 1, 11)\n *   var maxDate = max(date1, date2)\n *\n *   // v2.0.0 onward:\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   var maxDate = max(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the latest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the latest?\n * var result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\n\nexport default function max(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name min\n * @category Common Helpers\n * @summary Returns the earliest of the given dates.\n *\n * @description\n * Returns the earliest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `min` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   const date1 = new Date(1989, 6, 10)\n *   const date2 = new Date(1987, 1, 11)\n *   const minDate = min(date1, date2)\n *\n *   // v2.0.0 onward:\n *   const dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   const minDate = min(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} - the earliest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the earliest?\n * const result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */\n\nexport default function min(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport setUTCDay from \"../../../_lib/setUTCDay/index.js\";\nimport setUTCISODay from \"../../../_lib/setUTCISODay/index.js\";\nimport setUTCISOWeek from \"../../../_lib/setUTCISOWeek/index.js\";\nimport setUTCWeek from \"../../../_lib/setUTCWeek/index.js\";\nimport startOfUTCISOWeek from \"../../../_lib/startOfUTCISOWeek/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCWeek from \"../getUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCISOWeek from \"../getUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport parsers from \"./_lib/parsers/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward (toDate no longer accepts a string)\n *   toDate(1392098430000) // Unix to timestamp\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  }; // If timezone isn't specified, it will be set to the system timezone\n\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getDaysInMonth from \"../getDaysInMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setQuarter\n * @category Quarter Helpers\n * @summary Set the year quarter to the given date.\n *\n * @description\n * Set the year quarter to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} quarter - the quarter of the new date\n * @returns {Date} the new date with the quarter set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd quarter to 2 July 2014:\n * const result = setQuarter(new Date(2014, 6, 2), 2)\n * //=> Wed Apr 02 2014 00:00:00\n */\n\nexport default function setQuarter(dirtyDate, dirtyQuarter) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = toInteger(dirtyQuarter);\n  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;\n  var diff = quarter - oldQuarter;\n  return setMonth(date, date.getMonth() + diff * 3);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\n\nexport default function startOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  return date;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return startOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\n\nexport default function startOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3;\n  date.setMonth(month, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addHours from \"../addHours/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\n\nexport default function subHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addHours(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMinutes from \"../addMinutes/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\n\nexport default function subMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMinutes(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addWeeks from \"../addWeeks/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * const result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\n\nexport default function subWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addWeeks(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addYears from \"../addYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}"],"names":["addLeadingZeros","number","targetLength","sign","output","Math","abs","toString","length","assign","target","dirtyObject","TypeError","property","Object","prototype","hasOwnProperty","call","formatters","y","date","token","signedYear","getUTCFullYear","year","M","month","getUTCMonth","String","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","fractionalSeconds","floor","pow","dateLongFormatter","pattern","formatLong","width","timeLongFormatter","time","longFormatters","p","P","dateTimeFormat","matchResult","match","datePattern","timePattern","dateTime","replace","getTimezoneOffsetInMilliseconds","utcDate","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","getTime","getUTCISOWeekYear","dirtyDate","arguments","fourthOfJanuaryOfNextYear","setUTCHours","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfUTCISOWeekYear","requiredArgs","fourthOfJanuary","startOfUTCISOWeek","MILLISECONDS_IN_WEEK","getUTCISOWeek","toDate","diff","round","getUTCWeekYear","dirtyOptions","options","locale","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","RangeError","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","toInteger","firstWeek","startOfUTCWeek","getUTCWeek","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","format","input","concat","required","args","weekStartsOn","day","getUTCDay","setUTCDate","localeWeekStartsOn","defaultWeekStartsOn","dirtyNumber","NaN","Number","isNaN","ceil","addDays","dirtyAmount","amount","setDate","MILLISECONDS_IN_HOUR","addHours","addMilliseconds","timestamp","addMinutes","addMonths","dayOfMonth","endOfDesiredMonth","setMonth","daysInMonth","setFullYear","addWeeks","days","addYears","daysInWeek","maxTime","millisecondsInMinute","millisecondsInHour","millisecondsInSecond","minTime","minutesInHour","monthsInQuarter","monthsInYear","quartersInYear","secondsInHour","secondsInMinute","MILLISECONDS_IN_DAY","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","differenceInCalendarMonths","dateLeft","dateRight","yearDiff","monthDiff","differenceInCalendarWeeks","startOfWeekLeft","startOfWeekRight","differenceInCalendarYears","endOfDay","setHours","endOfMonth","endOfWeek","getDay","G","localize","era","ordinalNumber","unit","lightFormatters","Y","signedWeekYear","weekYear","twoDigitYear","R","isoWeekYear","u","Q","quarter","context","q","L","w","week","I","isoWeek","D","dayOfYear","setUTCMonth","startOfYearTimestamp","difference","getUTCDayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","dayPeriod","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","_originalDate","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","originalDate","T","offset","dirtyDelimiter","absOffset","minutes","delimiter","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","dirtyFormatStr","formatStr","isValid","subMilliseconds","formatterOptions","result","map","substring","firstCharacter","longFormatter","join","cleanEscapedString","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","getDaysInMonth","monthIndex","lastDayOfMonth","getISOWeekYear","getISOWeek","getQuarter","seconds","getYear","isAfter","dirtyDateToCompare","dateToCompare","isBefore","isDate","value","isEqual","dirtyLeftDate","dirtyRightDate","isSameDay","dateLeftStartOfDay","dateRightStartOfDay","isSameMonth","isSameQuarter","dateLeftStartOfQuarter","dateRightStartOfQuarter","isSameYear","isWithinInterval","interval","startTime","start","endTime","end","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","undefined","defaultWidth","formats","full","long","medium","short","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","dirtyIndex","valuesArray","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","_options","rem100","narrow","abbreviated","wide","am","pm","midnight","noon","morning","afternoon","evening","night","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","test","findKey","valueCallback","rest","slice","object","predicate","array","parsePattern","parseInt","parseResult","any","index","code","formatDistance","count","tokenValue","addSuffix","comparison","formatRelative","_date","_baseDate","max","dirtyDatesArray","datesArray","forEach","currentDate","min","parseISO","argument","additionalDigits","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","parseTime","timezone","parseTimezone","patterns","dateTimeDelimiter","timeZoneDelimiter","dateRegex","timeRegex","timezoneRegex","dateString","timeString","split","substr","exec","regex","RegExp","captures","century","isWeekDate","parseDateUnit","_year","validateWeekDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","parseTimeUnit","validateTime","parseFloat","timezoneString","_hours","validateTimezone","setUTCDay","dirtyDay","currentDay","remainder","dayIndex","numericPatterns","timezonePatterns","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","parsers","priority","parse","set","flags","incompatibleTokens","isTwoDigitYear","validate","normalizedTwoDigitYear","_match","_flags","firstWeekOfYear","dirtyWeek","setUTCWeek","dirtyISOWeek","setUTCISOWeek","subPriority","isLeapYear","wholeWeekDays","setUTCISODay","isPM","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","timestampIsSet","_token","notWhitespaceRegExp","dirtyDateString","dirtyFormatString","dirtyReferenceDate","formatString","subFnOptions","setters","dateToSystemTimezone","tokens","usedTokens","parser","incompatibleToken","_i","usedToken","fullToken","push","uniquePrioritySetters","setter","sort","filter","setterArray","convertedDate","dirtyHours","setMinutes","dirtyMinutes","dirtyMonth","dateWithDesiredMonth","setQuarter","dirtyQuarter","oldQuarter","setSeconds","dirtySeconds","setYear","dirtyYear","startOfDay","startOfISOWeekYear","startOfISOWeek","startOfMonth","startOfQuarter","currentMonth","startOfWeek","startOfYear","cleanDate","subDays","subHours","subMinutes","subMonths","subWeeks","subYears","argStr","console","warn","Error","stack"],"sourceRoot":""}